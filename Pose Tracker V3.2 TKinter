from cvzone.PoseModule import PoseDetector
import cv2
from pyfirmata import ArduinoNano, SERVO
from time import sleep
import time
from tkinter import *

#######################################################################################################################
#                                                   Variables
#######################################################################################################################
# Arduino Config
port = 'COM5'
pinX = 3
pinY = 5
board = ArduinoNano(port)
sleep(2)

board.digital[pinX].mode = SERVO
board.digital[pinY].mode = SERVO

board.digital[pinX].write(90)
board.digital[pinY].write(90)

sleep(2)

# Configuration variables
parameterX = 40
parameterY = 40
offset = 0
moving = True
rotate = True

# Video Capture Config
cap = cv2.VideoCapture(0)
detector = PoseDetector()

# Servo Config
currentServoPos = 90
currentServoPosVertical = 90

# Video Properties
cap.set(cv2.CAP_PROP_BUFFERSIZE, 10)
#cap.set(3, 1536)
#cap.set(4, 864)
cap.set(3, 1280)
cap.set(4, 1080)
width = cap.get(3)  # 640p
height = cap.get(4)  # 480p
width_center = width/2  # 320p
height_center = height/2  # 240p



# Tracking Initialising
xLandmarkMiddle = 0
yLandmarkMiddle = 0

#######################################################################################################################
#                                                   Functions
#######################################################################################################################
# Horizontal Tracking
def moveX():
    # Person on the right side
    global currentServoPos
    if int(xLandmarkMiddle) > width_center + parameterX + offset:
        if currentServoPos > 0:
            currentServoPos -= 1
        else:
            currentServoPos += 1
    # Person on the left side
    elif int(xLandmarkMiddle) < width_center - parameterX + offset:
        if currentServoPos < 180:
            currentServoPos += 1
        else:
            currentServoPos -= 1

# Vertical Tracking
def moveY():
    # Person on the bottom side
    global currentServoPosVertical
    if int(yLandmarkMiddle) > height_center + parameterY:
        if currentServoPosVertical > 0:
            currentServoPosVertical -= 1
    # Person on the top side
    elif int(yLandmarkMiddle) < height_center - parameterY:
        if currentServoPosVertical < 180:
            currentServoPosVertical += 1

def changeParameter(i):
    global parameterX
    parameterX = parameterState.get()

def changeOffset(i):
    global offset
    offset = offsetState.get()

def rotateWindow():
    global rotate
    rotate = not rotate

def cameraMovement():
    global moving
    if moving:
        moving = False
        buttonMovement = Button(root, bg='#AD5264',fg='#FFFFFF', width=20, text="Movement", command=cameraMovement).place(relx=0.75, rely=0.85, anchor=CENTER)
    else:
        moving = True
        buttonMovement = Button(root, bg='#52AD9B',fg='#FFFFFF', width=20, text="Movement", command=cameraMovement).place(relx=0.75, rely=0.85, anchor=CENTER)

#######################################################################################################################
#                                                       GUI
#######################################################################################################################
# Tkinter Setup
root = Tk(className="TiltPan Camera Configuration")
root.geometry("500x200")

parameterState = IntVar()
scaleParameter = Scale(root,
              command=changeParameter,
              variable=parameterState,
              from_ = 20,
              to = 250,
              orient = HORIZONTAL,
              length = 400,
              label = "Parameter")
scaleParameter.pack(anchor = CENTER)

offsetState = IntVar()
scaleOffset = Scale(root,
              command=changeOffset,
              variable=offsetState,
              from_ = -250,
              to = 250,
              orient = HORIZONTAL,
              length = 400,
              label = "Offset")
scaleOffset.pack(anchor = CENTER)

buttonFlip = Button(root, bg='#413D4A', fg='#FFFFFF', width=20, text="Flip", command=rotateWindow).place(relx=0.25, rely=0.85, anchor=CENTER)
buttonMovement = Button(root, bg='#52AD9B', fg='#FFFFFF', width=20, text="Movement", command=cameraMovement).place(relx=0.75, rely=0.85, anchor=CENTER)

#######################################################################################################################
#                                                   Main Loop
#######################################################################################################################
while True:
    timeStart = time.process_time_ns()
    root.update()

    if rotate:
        success, image = cap.read()
        img = cv2.rotate(image, cv2.ROTATE_180)
    else:
        success, img = cap.read()
    img = detector.findPose(img)

    lmList, bboxInfo = detector.findPosition(img, bboxWithHands=False)

    # Shows the current Servo Position, X and Y Value
    cv2.putText(img, "Servo: " + str(currentServoPos) + " | " + str(currentServoPosVertical), (20, 50), cv2.FONT_HERSHEY_PLAIN, 2, (255, 255, 255), 2)
    cv2.putText(img, "x|y: " + str(xLandmarkMiddle) + " | " + str(yLandmarkMiddle), (20, 100), cv2.FONT_HERSHEY_PLAIN, 2, (255, 255, 255), 2)

    # Shows the tracking leeway range with adjustable Parameter
    cv2.line(img, (int(width_center) - parameterX + offset, 0), (int(width_center) - parameterX + offset, 1024), (153, 51, 255), 1) # line left
    cv2.line(img, (int(width_center) + parameterX + offset, 0), (int(width_center) + parameterX + offset, 1024), (153, 51, 255), 1) # line right
    cv2.line(img, (0, int(height_center)), (1280, int(height_center)), (153, 51, 255), 1) # line middle

    if bboxInfo:
        center = bboxInfo["center"]
        cv2.circle(img, (int(xLandmarkMiddle), int(yLandmarkMiddle)), 8, (0, 255, 0), cv2.FILLED)

        # Landmark Coordinates Shoulders
        xLandmarkLeft = lmList[11][1]
        yLandmarkLeft = lmList[11][2]
        xLandmarkRight = lmList[12][1]
        yLandmarkRight = lmList[12][2]

        if not rotate:
            xLandmarkMiddle = width - ((xLandmarkRight - xLandmarkLeft)/2 + xLandmarkLeft)
            yLandmarkMiddle = height - ((yLandmarkRight - yLandmarkLeft)/2 + yLandmarkLeft)
        else:
            xLandmarkMiddle = (xLandmarkRight - xLandmarkLeft)/2 + xLandmarkLeft
            yLandmarkMiddle = (yLandmarkRight - yLandmarkLeft)/2 + yLandmarkLeft

############################################# Servo Steuerung #########################################################
        #  go to standard position 90 deg
        board.digital[pinX].write(currentServoPos)
        board.digital[pinY].write(currentServoPosVertical)

    # checks if moving is enabled or paused
    if moving:
        # Function calls to change servo positions
        moveX()
        moveY()

    # move Servo to correct Position
    board.digital[pinX].write(currentServoPos)
    #board.digital[pin2].write(currentServoPosVertical)

#######################################################################################################################

    # show Video
    cv2.imshow("Image", img)

    # moving can be enabled or paused with the Hotkey: w
    if cv2.waitKey(30) & 0xFF == ord('w'):
        moving = not moving

    #close everything with Hotkey: q
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    timeEnd = time.process_time_ns()
    print((timeEnd-timeStart)/1000000)
cap.release()
cv2.destroyAllWindows()
